{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Sgr A* Flares Spectrum\n",
    "__Some housekeeping__\n",
    "* Run this notebook in Python 3.\n",
    "\n",
    "The Sgr A* spectrum is given in figure 1. (Yuan et al. 2003)\n",
    "\n",
    "![title](img/SpectrumYuan2003.PNG)\n",
    "\n",
    "\n",
    "__Goals of this notebook__\n",
    "\n",
    "* Create a seed distribution synchroton photons from a mildly relativistic electrons.\n",
    "* Perform (at least one) IC scatterings.\n",
    "* Put all of the machinery into the correct geometry, with the goal of reproducing the spectrum of flares in Sgr A* jets.\n",
    "\n",
    "\n",
    "First we do some necessary python imports."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy\n",
    "import scipy.integrate as integrate\n",
    "from scipy.integrate import quad\n",
    "from scipy.special import kv, gamma"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some constants"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "m_e=9.1*10**-28   # Electron mass [g]\n",
    "e=5*10**-10       # Electron charge [esu]\n",
    "k=1.4*10**-16     # Boltzmann constnat [erg/K]\n",
    "c_light=3*10**10  # Speed of light [cm/s]\n",
    "B=3               # Magnetic field [Gauss]\n",
    "theta=np.pi/2     # Synchroton angle between velocity and field [rad]\n",
    "hbar=10**-27      # Reduced planck constant [erg s]\n",
    "sigma_t=6.65e-25  # Thomson cross section\n",
    "theta_th=10        # Electron thermal energy in fractions of electron mass.\n",
    "\n",
    "log_omega_min=5\n",
    "log_omega_max=11\n",
    "\n",
    "gamma_min=1\n",
    "gamma_max=100\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Maxwell-JÃ¼ttner distribution of electrons\n",
    "The velocity distribution of electrons that will produce the synchroton radiation is that of mildly relativistic electrons: $kT \\sim m_e c^2$.\n",
    "$$\n",
    "        N(\\gamma)=N_0\\frac{\\gamma^2\\beta}{\\theta K_2(1/\\theta)}\\text{exp}(-\\frac{\\gamma}{\\theta}),\n",
    "$$\n",
    "    where $\\theta = \\frac{kT}{m_e c^2}$, and $K_2$ is the modified Bessel function of the second kind. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Q: WHAT TO DO WITH $N_0$ (related to normalization)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def MJ_of_gamma(gamma,theta_th):\n",
    "    beta=np.sqrt(1-1/gamma**2)\n",
    "    f=gamma**2*beta*np.exp(-gamma/theta_th)/(theta*kv(2,1./theta_th))\n",
    "    return(f)\n",
    "    \n",
    "number=1000    \n",
    "gamma = np.linspace(gamma_min,gamma_max,number)\n",
    "MJ = np.zeros(number)\n",
    "\n",
    "for i in range(len(gamma)):\n",
    "    MJ[i] = MJ_of_gamma(gamma[i],theta_th)\n",
    "\n",
    "\n",
    "plt.plot(gamma,MJ,label=r'$\\theta=${:4.1f}'.format(theta_th))\n",
    "plt.xscale('log')\n",
    "plt.yscale('log')\n",
    "plt.xlabel('$\\gamma$',fontsize=20)\n",
    "plt.ylabel('N($\\gamma$) [#/volume/$\\gamma$]', fontsize=20)\n",
    "plt.grid(1)\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Later on we will need function that will draw a random electron from the Maxwell-JÃ¼ttner distribution, we will do this now. The exact same process is used in the Monte Carlo tutorial, though I had to tweak it a bit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "normalization factor is 6.349e+00\n"
     ]
    }
   ],
   "source": [
    "def N_of_gamma(gamma):\n",
    "        value=MJ_of_gamma(gamma,theta_th)\n",
    "        return(value)\n",
    "\n",
    "norm,error=quad(N_of_gamma,gamma_min,gamma_max) #normalization value, calculate this once, here. \n",
    "print('normalization factor is {0:5.3e}'.format(norm))\n",
    "\n",
    "def N_electron_PDF(gamma):\n",
    "    return(N_of_gamma(gamma)/norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Test if it works"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "surface under graph 1.000e+00\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "number=1000    \n",
    "gamma = np.linspace(gamma_min,gamma_max,number)\n",
    "P=np.zeros(number)\n",
    "\n",
    "surface,error=quad(N_electron_PDF,gamma_min,gamma_max)\n",
    "print('surface under graph {0:5.3e}'.format(surface))\n",
    "\n",
    "\n",
    "for i in range(number):\n",
    "    P[i]=N_electron_PDF(gamma[i])\n",
    "   \n",
    "plt.plot(gamma,P)\n",
    "plt.title('Electron PDF')\n",
    "plt.xscale('log')\n",
    "plt.yscale('log')\n",
    "plt.xlabel(r'$\\gamma$',fontsize=20)\n",
    "plt.ylabel(r'PDF',fontsize=20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we take this PDF and turn it into a CDF."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "number = 100\n",
    "def N_electron_CDF(gamma):\n",
    "    integ=np.zeros(number)\n",
    "    integ[0]=N_electron_PDF(gamma[0])\n",
    "    for i in range(number-1):\n",
    "        integ[i+1],error=quad(N_electron_PDF,gamma[i],gamma[i+1]) #integrate the PDF between every omega interval\n",
    "    \n",
    "    CDF=np.zeros(number)\n",
    "    CDF[0]=integ[0]\n",
    "    for i in range(number-1):\n",
    "        CDF[i+1]=sum(integ[0:i+2]) # add up the intervals to create a CDF\n",
    "    return(CDF)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Test if it works:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "number=1000    \n",
    "gamma = np.linspace(gamma_min,gamma_max,number)\n",
    "CDF_electrons = N_electron_CDF(gamma) \n",
    "\n",
    "\n",
    "plt.plot(gamma,CDF_electrons)\n",
    "plt.xscale('log')\n",
    "plt.xlabel(r'$\\gamma$',fontsize=20)\n",
    "plt.ylabel(r'CDF',fontsize=20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then numerically invert:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def N_gamma_of_P(gamma,CDF,n_electrons):\n",
    "    gamma_electron=np.interp(np.random.rand(n_electrons),CDF,gamma)\n",
    "    return(gamma_electron)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And make a plot to see if it worked:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_electrons=10000\n",
    "number=1000    \n",
    "gamma = np.linspace(gamma_min,gamma_max,number)\n",
    "gamma_electron=N_gamma_of_P(gamma,CDF_electrons,n_electrons)\n",
    "plot_bins=np.linspace(gamma_min,gamma_max,number)\n",
    "electron_dist,edges=np.histogram(gamma_electron,bins=plot_bins,density=True)\n",
    "plot_gammas=np.sqrt(plot_bins[1:]*plot_bins[:-1])\n",
    "plt.plot(gamma,P,label='PDF')\n",
    "plt.loglog(plot_gammas,electron_dist,'.',label='distributed electrons')\n",
    "plt.xlabel('$\\gamma$',fontsize=20)\n",
    "plt.ylabel('PDF',fontsize=20)\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Synchrotron power spectrum\n",
    "The synchrotron power spectrum for a single electron is given by\n",
    "$$\n",
    "    P_{sync}(\\omega)=\\frac{\\sqrt{3} e^3 B \\sin{\\theta}}{2\\pi m_e c^2} F(x),\n",
    "$$\n",
    "where\n",
    "$$\n",
    "   F(x) = x \\int_x^\\infty K_{5/3}(\\xi)d\\xi,\n",
    "$$\n",
    "        and $x=\\omega/\\omega_c$. Also, $\\omega_c=\\frac{3}{2}\\gamma^2\\frac{eB}{m_e c}\\sin{\\theta}$. This implies that $\\omega_c=\\omega_c(\\gamma)$ and thus that $F(x)=F(\\gamma,\\omega)$ and $P_{sync}(\\omega)=P_{sync}(\\gamma,\\omega,\\theta,B)$.\n",
    "        \n",
    "Next up, we make some functions that we will need to obtain the synchroton power spectrum as a function of magnetic field, lorentz factor and pitch angle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def omega_c(gamma,B,theta):\n",
    "    value=3/2*gamma**2*e*B/(m_e*c_light)*np.sin(theta)\n",
    "    return(value)\n",
    "\n",
    "def K_fivethird(x):\n",
    "    value=kv(5/3,x)\n",
    "    return(value)\n",
    "\n",
    "def F_sync(omega,omega_c):\n",
    "    x=omega/omega_c\n",
    "    output_integral,error=quad(K_fivethird,x,np.inf)\n",
    "    value=x*output_integral\n",
    "    return(value)\n",
    "\n",
    "def P_sync(gamma,omega,B,theta):\n",
    "    value = np.sqrt(3)*e**3*B*np.sin(theta)/(2*np.pi*m_e*c_light**2)*F_sync(omega,omega_c(gamma,B,theta))\n",
    "    return(value)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And we test the function out."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "according to peak frequency formula, the peak should be at 2.473e+09 or 10^9.39\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "number = 100\n",
    "\n",
    "\n",
    "omega = np.logspace(log_omega_min,log_omega_max,number)\n",
    "P = np.zeros(number)\n",
    "\n",
    "gamma = 10\n",
    "\n",
    "\n",
    "for i in range(number):\n",
    "    P[i] = P_sync(gamma,omega[i],B,theta)\n",
    "\n",
    "omega_peak=0.3*omega_c(gamma,B,theta)\n",
    "print('according to peak frequency formula, the peak should be at {0:5.3e} or 10^{1:3.2f}'.format(omega_peak,np.log10(omega_peak)))\n",
    "\n",
    "plt.plot(omega,P, label='$P(\\omega)$')\n",
    "plt.plot(omega_peak,P_sync(gamma,omega_peak,B,theta),'x', label='peak')\n",
    "plt.legend()\n",
    "plt.xscale('log')\n",
    "plt.yscale('log')\n",
    "plt.title(r'Power per frequency',fontsize=20)\n",
    "plt.xlabel(r'$\\omega$[rad/s]',fontsize=20)\n",
    "plt.ylabel(r'P[erg/s/(rad/s)]',fontsize=20)\n",
    "plt.grid(1)\n",
    "plt.show()\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we want to combine the velocity distribution and power spectrum into a total spectrum, by \n",
    "\n",
    "$$\n",
    "    P_{tot}(\\omega)= \\int P_{sync}(\\gamma, \\omega) N(\\gamma) d\\gamma\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def P_tot(gamma_min,gamma_max,omega,B,theta):\n",
    "    def P_of_gamma(gamma):                            #integration only takes single variable functions\n",
    "        value=P_sync(gamma,omega,B,theta)\n",
    "        return(value)\n",
    "    def N_of_gamma(gamma):                            #integration only takes single variable functions\n",
    "        value=MJ_of_gamma(gamma,theta_th)\n",
    "        return(value)\n",
    "    def integrand(gamma):\n",
    "        value=N_of_gamma(gamma)*P_of_gamma(gamma)\n",
    "        return(value)\n",
    "    output,error=quad(integrand,gamma_min,gamma_max)\n",
    "    value=output\n",
    "    return(output)\n",
    "            "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Try it out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "number=100\n",
    "omega=np.logspace(log_omega_min,log_omega_max,number)\n",
    "\n",
    "\n",
    "P=np.zeros(number)\n",
    "\n",
    "for i in range(number):\n",
    "    P[i]=P_tot(gamma_min,gamma_max,omega[i],B,theta)\n",
    "\n",
    "plt.plot(omega,P, label='$P(\\omega)$')\n",
    "plt.legend()\n",
    "plt.xscale('log')\n",
    "plt.yscale('log')\n",
    "plt.title(r'Total power per frequency',fontsize=20)\n",
    "plt.xlabel(r'$\\omega$[rad/s]',fontsize=20)\n",
    "plt.ylabel(r'P[erg/s/Volume[missing]/(rad/s)]',fontsize=20)\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The seed photon distribution\n",
    "We now want to be able to use this result to create some seed photons, according to the above distribution. To do this, we have to create a function that will return a random photon according to the above distribution. I will first make a PDF, and use it to make a cumulative PDF. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "normalization factor is 3.930e+05\n"
     ]
    }
   ],
   "source": [
    "def N_of_omega(omega):\n",
    "        value=P_tot(gamma_min,gamma_max,omega,B,theta)/(hbar*omega) #NUMBER OF PHOTONS\n",
    "        return(value)\n",
    "\n",
    "norm,error=quad(N_of_omega,10**log_omega_min,10**log_omega_max) #normalization value, calculate this once, here. \n",
    "print('normalization factor is {0:5.3e}'.format(norm))\n",
    "\n",
    "def N_photon_PDF(omega):\n",
    "    return(N_of_omega(omega)/norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now test if it works."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "surface under graph 1.000e+00\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "number=100\n",
    "omega=np.logspace(log_omega_min,log_omega_max,number)\n",
    "P=np.zeros(number)\n",
    "\n",
    "surface,error=quad(N_photon_PDF,10**log_omega_min,10**log_omega_max)\n",
    "print('surface under graph {0:5.3e}'.format(surface))\n",
    "\n",
    "\n",
    "for i in range(number):\n",
    "    P[i]=N_photon_PDF(omega[i])\n",
    "   \n",
    "plt.plot(omega,P)\n",
    "plt.title('Seed photon PDF')\n",
    "plt.xscale('log')\n",
    "plt.yscale('log')\n",
    "plt.xlabel(r'$\\omega$[rad/s]',fontsize=20)\n",
    "plt.ylabel(r'PDF',fontsize=20)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we take this PDF and turn it into a CDF."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "number=100\n",
    "def N_photon_CDF(omega):\n",
    "    integ=np.zeros(number)\n",
    "    integ[0]=N_photon_PDF(omega[0])\n",
    "    for i in range(number-1):\n",
    "        integ[i+1],error=quad(N_photon_PDF,omega[i],omega[i+1]) #integrate the PDF between every omega interval\n",
    "    \n",
    "    CDF=np.zeros(number)\n",
    "    CDF[0]=integ[0]\n",
    "    for i in range(number-1):\n",
    "        CDF[i+1]=sum(integ[0:i+2]) # add up the intervals to create a CDF\n",
    "    return(CDF)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Make a quick plot: (ok. it's not that quick.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "number = 100\n",
    "omega=np.logspace(log_omega_min,log_omega_max,number)\n",
    "CDF_photons = N_photon_CDF(omega) \n",
    "\n",
    "\n",
    "plt.plot(omega,CDF_photons)\n",
    "plt.xscale('log')\n",
    "plt.xlabel(r'$\\omega$[rad/s]',fontsize=20)\n",
    "plt.ylabel(r'CDF',fontsize=20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next up we want to invert the CDF and create a function  ð(ð) , where  ð  is a random variable. Many photons drawn using  ð(ð)  are then distributed with an  ð  according to the PDF."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "def N_omega_of_P(omega, CDF,n_photons):\n",
    "    e_phot=np.interp(np.random.rand(n_photons),CDF,omega)\n",
    "    return(e_phot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_photons=100000\n",
    "photons=np.zeros(n_photons)\n",
    "number=100\n",
    "omega=np.logspace(log_omega_min,log_omega_max,number)\n",
    "omega_phot=N_omega_of_P(omega,CDF_photons,n_photons)\n",
    "plot_bins=np.logspace(log_omega_min,log_omega_max,number)\n",
    "photon_dist,edges=np.histogram(omega_phot,bins=plot_bins,density=True)\n",
    "plot_omegas=np.sqrt(plot_bins[1:]*plot_bins[:-1])\n",
    "plt.plot(omega,P,label='PDF')\n",
    "plt.loglog(plot_omegas,photon_dist,'.',label='distributed photons')\n",
    "plt.xlabel('$\\omega$ [rad/s]',fontsize=20)\n",
    "plt.ylabel('PDF',fontsize=20)\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Import some stuff from the Monte Carlo tutorial!\n",
    "Define mc_parms: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f_of_v_mono():                    # we will define this later\n",
    "    return(0)\n",
    "def f_of_hnu_mono():                  # we will define this later\n",
    "    return(0)\n",
    "\n",
    "mc_parms={'n_photons':100000,         # number of trials--start somewhat small and go up\n",
    "          'kt_seeds':1.6e-9,          # temperature/energy of the seed photons (in energy units)\n",
    "          'H':3e7,                    # height of the corona (H ~ R, and R ~ 100 R_g ~ 3e7 cm)\n",
    "          'velocity':3e9,             # electron velocity (only used by mono-energetic distribution)\n",
    "          'kt_electron':3.2e-8,       # electron temperature (in energy units, used by Maxwellian)\n",
    "          'tau':0.1,                  # optical depth of the corona\n",
    "          'v_dist':f_of_v_mono,      # name of velocity distribution function (start with delta function)\n",
    "          'hnu_dist':f_of_hnu_mono,  # name of photon distribution function (start with delta function)\n",
    "         }"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define compton_y function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your code produces a y-parameter of  1.00. The test value of 1.00\n"
     ]
    }
   ],
   "source": [
    "def compton_y(pre,post):\n",
    "    return(np.mean((post-pre)/pre))\n",
    "\n",
    "def test_compton_y():\n",
    "    post=np.ones(100)*2\n",
    "    pre=np.ones(100)\n",
    "    print('Your code produces a y-parameter of {:5.2f}. The test value of 1.00'.format(compton_y(pre,post)))\n",
    "    \n",
    "test_compton_y()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define random_direction function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def random_direction(number=None):\n",
    "    \"\"\"Returns randomly oriented unit vectors.\n",
    "\n",
    "    Args: \n",
    "        None\n",
    "        \n",
    "    Parameters:\n",
    "        number: number of random vectors to return\n",
    "\n",
    "    Returns::\n",
    "        (number,3)-element numpy array: Randomly oriented unit vectors\n",
    "    \"\"\"\n",
    "\n",
    "    #\n",
    "    # This is how you draw a random number for a uniform\n",
    "    # distribution:\n",
    "    #\n",
    "\n",
    "    if number is None:\n",
    "        number=1\n",
    "\n",
    "    phi=2.*np.pi*np.random.rand(number)\n",
    "    cos_phi=np.cos(phi)\n",
    "    sin_phi=np.sin(phi)\n",
    "    cos_theta=2.*np.random.rand(number)-1\n",
    "    sin_theta=np.sqrt(1 - cos_theta**2)\n",
    "    return((np.array([sin_theta*cos_phi,sin_theta*sin_phi,cos_theta])).transpose())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define f_of_hnu_mono"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f_of_hnu_mono(mc_parms,number=None):\n",
    "    \"\"\"Returns randomly drawn velocity from distribution function\n",
    "    \n",
    "    Args:\n",
    "        mc_parms (dictionary): Monte-Carlo parameters\n",
    "    \n",
    "    Parameters:\n",
    "        number (integer): Number of photon energies to generate\n",
    "\n",
    "    Returns:\n",
    "        numpy array: seed photon energies drawn from photon distribution\n",
    "    \"\"\"\n",
    "    if number is None:\n",
    "        number=1\n",
    "    return(np.ones(number)*mc_parms['kt_seeds'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define photon_origin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def photon_origin(number=None):\n",
    "    \"\"\"Returns emission location of a photon\n",
    "    \"\"\"\n",
    "    if number is None:\n",
    "        number=1\n",
    "    return(np.zeros([number,3]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define draw_seed_photons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def draw_seed_photons(mc_parms,number=None):\n",
    "    \"\"\"Returns a single seed photon\n",
    "    \n",
    "    Args:\n",
    "        mc_parms (dictionary): MC parameters\n",
    "    \n",
    "    Parameters:\n",
    "        number (integer): number of photons to return\n",
    "        \n",
    "    Returns:\n",
    "        (number x 4)numpy array: Photon momentum 4-vectors\n",
    "        (number x 3)numpy array: Initial photon positions\n",
    "    \"\"\"\n",
    "\n",
    "    if number is None:\n",
    "        number=1\n",
    "    x_seed=photon_origin(number=number)\n",
    "    n_seed=random_direction(number=number)\n",
    "    hnu=mc_parms['hnu_dist'](mc_parms,number=number)\n",
    "    p_seed=(np.array([hnu,hnu*n_seed[:,0],hnu*n_seed[:,1],hnu*np.abs(n_seed[:,2])])).transpose()/c_light\n",
    "    return(p_seed,x_seed)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define tau_of_scatter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tau_of_scatter():\n",
    "    \"\"\"Calculates optical depth a photon traveled to before interacting, given probability\n",
    "    \n",
    "    Args:\n",
    "        None\n",
    "        \n",
    "    Returns:\n",
    "        real: Optical depth as function of P\n",
    "\n",
    "    \"\"\"\n",
    "    \n",
    "    # First, draw your random probability P\n",
    "    tau=-np.log(np.random.rand())\n",
    "    return(tau)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define distance_of_scatter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def distance_of_scatter(mc_parms):\n",
    "    \"\"\"Calculates the distance that corresponds to an optical depth tau   \n",
    "\n",
    "    Args:\n",
    "        tau (real): optical depth photon travels before scattering occurs\n",
    "        mc_parsm (dictionary): MC parameters\n",
    "\n",
    "    Returns:\n",
    "        real: distance\n",
    "\n",
    "    \"\"\"\n",
    "\n",
    "    tau=tau_of_scatter()\n",
    "    electron_density=mc_parms['tau']/mc_parms['H']/sigma_t\n",
    "    distance=tau/sigma_t/electron_density\n",
    "    \n",
    "    return(distance)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define scatter_location:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def scatter_location(x_old,p_photon,mc_parms):\n",
    "    \"\"\"This function goes through the steps of a single scattering\n",
    "\n",
    "    Args:\n",
    "        x_old.   (three-element numpy array): holds the position\n",
    "        p_photon (four-element numpy array): the in-coming photon four-momentum\n",
    "        mc_parms (dictionary): the simulation parameters\n",
    "    \n",
    "    Returns:\n",
    "        three-element numpy array: scattering location\n",
    "    \"\"\"\n",
    "    \n",
    "    # ...path-length:\n",
    "    distance = distance_of_scatter(mc_parms)\n",
    "    \n",
    "    # ...in direction:\n",
    "    photon_direction=p_photon[1:]/p_photon[0]\n",
    "    \n",
    "    # Update photon position with the new location\n",
    "    x_new = x_old + distance*photon_direction\n",
    "    \n",
    "    return(x_new)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define f_of_v_mono"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f_of_v_mono(mc_parms):\n",
    "    \"\"\"Returns a single randomly drawn velocity from distribution function\n",
    "    \n",
    "    Args:\n",
    "        mc_parms (dictionary): Monte-Carlo parameters\n",
    "\n",
    "    Returns:\n",
    "        real: electron velocity drawn from distribution\n",
    "    \"\"\"\n",
    "    \n",
    "    return(mc_parms['velocity'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Drawing random electron velocities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "def draw_electron_velocity(mc_parms,p_photon):\n",
    "    \"\"\"Returns a randomized electron velocity vector for inverse \n",
    "       Compton scattering, taking relativistic foreshortening of the\n",
    "       photon flux in the electron frame into account\n",
    "       \n",
    "       Args:\n",
    "           mc_parms (dictionary): Monte-Carlo parameters\n",
    "           p_photon (4 dimentional np array): Photon 4-momentum\n",
    "           \n",
    "       Returns:\n",
    "           3-element numpy array: electron velocity\n",
    "    \"\"\"\n",
    "    v=mc_parms['v_dist'](mc_parms)\n",
    "    n=draw_electron_direction(v,p_photon)\n",
    "    return(v*n)\n",
    "\n",
    "def draw_electron_direction(v,p_photon):\n",
    "    \"\"\"Draw a randomized electron direction, taking account of the\n",
    "       increase in photons flux from the foward direction, which\n",
    "       effectively increases the cross section for forward scattering.\n",
    "       \n",
    "       Args:\n",
    "            v (real): electron speed\n",
    "            p_photon (4 element numpy array): photon 4-momentum\n",
    "            \n",
    "       Returns:\n",
    "           3-element numpy array: randomized electron velocity vector\n",
    "    \"\"\"\n",
    "    phi=2.*np.pi*np.random.rand()\n",
    "    cosp=np.cos(phi)\n",
    "    sinp=np.sin(phi)\n",
    "    cost=mu_of_p_electron(v/c_light,np.random.rand())\n",
    "    sint=np.sqrt(1 - cost**2)\n",
    "    \n",
    "    n_1=p_photon[1:]/p_photon[0]\n",
    "    if (np.sum(np.abs(n_1[1:2])) != 0):\n",
    "        n_2=np.cross(n_1,np.array([1,0,0]))\n",
    "    else:\n",
    "        n_2=np.cross(n_1,np.array([0,1,0]))\n",
    "    n_2/=np.sqrt(np.sum(n_2**2))\n",
    "    n_3=np.cross(n_1,n_2)\n",
    "    \n",
    "    # express new vector in old base\n",
    "    n_new=(n_2*cosp+n_3*sinp)*sint + n_1*cost\n",
    "    return(n_new/np.sqrt(np.sum(n_new**2)))\n",
    "\n",
    "def mu_of_p_electron(beta,p):\n",
    "    \"\"\"Invert probability for foreshortened effective\n",
    "       Thomson scattering cross section, with\n",
    "    \n",
    "       P = \n",
    "       \n",
    "       Args:\n",
    "           beta (real): v/c for electron\n",
    "           p: probability value between 0 and 1\n",
    "           \n",
    "       Returns:\n",
    "           real: cos(theta) relative to photon direction\n",
    "    \"\"\"\n",
    "    mu=1/beta-np.sqrt(1/beta**2 + 1 - 4*p/beta + 2/beta)\n",
    "    return(mu)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lorentz Transform"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "def lorentz_transform(p,v):\n",
    "    \"\"\"Returns general Lorentz transform\n",
    "\n",
    "    Args:\n",
    "        p (four-element numpy array): input four-vector\n",
    "        v (three-element numpy array): the 3-velocity of the frame we want to transform into\n",
    "\n",
    "    Returns:\n",
    "        four-element numpy array: the transformed four-vector\n",
    "    \"\"\"\n",
    "\n",
    "    beta=np.sqrt(np.sum(v**2))/c_light\n",
    "    beta_vec=v/c_light\n",
    "    gamma=1./np.sqrt(1. - beta**2)\n",
    "    matrix=np.zeros((4,4))\n",
    "    matrix[0,0]=gamma\n",
    "    matrix[1:,0]=-gamma*beta_vec\n",
    "    matrix[0,1:]=-gamma*beta_vec\n",
    "    matrix[1:,1:]=(gamma-1)*np.outer(beta_vec,beta_vec)/beta**2\n",
    "    for i in range(1,4):\n",
    "        matrix[i,i]+=1\n",
    "    return(np.dot(matrix,p))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Scattering angle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cos_theta_thomson(p):\n",
    "    \"\"\"Invert P(<\\theta) to calculate cos(theta)\n",
    "        \n",
    "        Args:\n",
    "            p (real): probability between 0 and 1\n",
    "            \n",
    "        Returns:\n",
    "            real: scattering angle drawn from Thomson distribution\n",
    "    \"\"\"\n",
    "    a=-4 + 8*p\n",
    "    b=a**2 + 4\n",
    "    return((np.power(2,1/3)*np.power(np.sqrt(b)-a,2/3)-2)/\n",
    "           (np.power(2,2/3)*np.power(np.sqrt(b)-a,1/3)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Thomson scattering machinery"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "def thomson_scatter(p_photon):\n",
    "    \"\"\"This function performs Thomson scattering on a photon\n",
    "    \n",
    "    Args:\n",
    "        p_photon (4-element numpy array): Incoming photon four-vector\n",
    "        \n",
    "    Returns:\n",
    "        4-element numpy array: Scattered photon four-vector\n",
    "    \"\"\"\n",
    "    \n",
    "    n_1=p_photon[1:]/p_photon[0]\n",
    "    if (np.sum(np.abs(n_1[1:2])) != 0):\n",
    "        n_2=np.cross(n_1,np.array([1,0,0]))\n",
    "    else:\n",
    "        n_2=np.cross(n_1,np.array([0,1,0]))\n",
    "    n_2/=np.sqrt(np.sum(n_2**2))\n",
    "    n_3=np.cross(n_1,n_2)\n",
    "\n",
    "    # scattering is uniform in phi\n",
    "    phi=2.*np.pi*np.random.rand()\n",
    "    cosp=np.cos(phi)\n",
    "    sinp=np.sin(phi)\n",
    "    \n",
    "    # draw cos_theta from proper distribution\n",
    "    cost=cos_theta_thomson(np.random.rand())\n",
    "    sint=np.sqrt(1 - cost**2)\n",
    "    \n",
    "    # express new vector in old base\n",
    "    n_new=(n_2*cosp+n_3*sinp)*sint + n_1*cost\n",
    "    n_new/=np.sqrt(np.sum(n_new**2))\n",
    "    \n",
    "    # return scatterd 4-momentum vector\n",
    "    return(np.array(p_photon[0]*np.array([1,n_new[0],n_new[1],n_new[2]])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Inverse thomson scatter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "def inverse_compton_scatter(p_photon,mc_parms):\n",
    "    \"\"\"This function performs an iteration of inverse Compton scattering off an electron of velocity v_vec.\n",
    "    \n",
    "    Args:\n",
    "        p_photon (four element numpy array): input photon four-momentum\n",
    "        v_vec (three element numpy array): 3-velocity vector of the scattering electron\n",
    "        \n",
    "    Returns:\n",
    "        four-element numpy array: scattered photon four-momentum in observer's frame\n",
    "    \"\"\"\n",
    "    \n",
    "    # throw the dice one more time to draw a random electron velocity\n",
    "    velocity=draw_electron_velocity(mc_parms,p_photon)\n",
    "    # first, transform to electron frame\n",
    "    p_photon_prime=lorentz_transform(p_photon,velocity)\n",
    "\n",
    "    # Thomson scatter\n",
    "    p_out_prime=thomson_scatter(p_photon_prime)\n",
    "    \n",
    "    # transform back to observer frame\n",
    "    return(lorentz_transform(p_out_prime,-velocity))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Monte Carlo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "def monte_carlo(mc_parms):\n",
    "    \"\"\"Perform a simple Monte-Carlo simulation\n",
    "\n",
    "    Args:\n",
    "       mc_parms (dictionary): Monte-Calro parameters\n",
    "    \n",
    "    Returns:\n",
    "        numpy array: List of escaped photon energies\n",
    "        numpy array: Lost of seed energies of all escaping photons\n",
    "    \"\"\"\n",
    "    \n",
    "    # arrays to store initial and final photon energies\n",
    "    hnu_seed=np.zeros(mc_parms['n_photons'])\n",
    "    hnu_scattered=hnu_seed.copy()\n",
    "\n",
    "    # draw our seed-photon population. Much faster to do this once for all photons\n",
    "    p_photons,x_photons=draw_seed_photons(mc_parms,number=mc_parms['n_photons'])\n",
    "   \n",
    "    # run the scattering code n_photons times\n",
    "    for p_photon,x_photon,i in zip(p_photons,x_photons,range(mc_parms['n_photons'])):\n",
    "        # initial photon four-momentum\n",
    "        # store seed photon energy for future use (calculating Compton-y parameter)\n",
    "        hnu_seed[i]=p_photon[0]*c_light\n",
    "\n",
    "        # keep scattering until absorbed or escaped\n",
    "        scattered=True\n",
    "        while (scattered):\n",
    "            # find next scattering location\n",
    "            x_photon = scatter_location(x_photon,p_photon,mc_parms)\n",
    "            # if it's inside the corona, perform inverse Compton scatter\n",
    "            if (x_photon[2]>=0 and x_photon[2]<=mc_parms['H']):\n",
    "                p_photon=inverse_compton_scatter(p_photon,mc_parms)\n",
    "            else:\n",
    "                scattered=False\n",
    "                if (x_photon[2]<=0):\n",
    "                    p_photon*=0\n",
    "\n",
    "        # store the outgoing photon energy in the array\n",
    "        hnu_scattered[i]=p_photon[0]*c_light\n",
    "\n",
    "    # only return escaped photons and their seed energy\n",
    "    return(hnu_scattered[hnu_scattered > 0],hnu_seed[hnu_scattered > 0])\n",
    "\n",
    "def monte_carlo_2(mc_parms):\n",
    "    \"\"\"Perform a simple Monte-Carlo simulation\n",
    "\n",
    "    Args:\n",
    "       mc_parms (dictionary): Monte-Calro parameters\n",
    "    \n",
    "    Returns:\n",
    "        numpy array: List of escaped photon energies\n",
    "        numpy array: Lost of seed energies of all escaping photons\n",
    "    \"\"\"\n",
    "    \n",
    "    # arrays to store initial and final photon energies\n",
    "    hnu_seed=np.zeros(mc_parms['n_photons'])\n",
    "    hnu_scattered=hnu_seed.copy()\n",
    "\n",
    "    # draw our seed-photon population. Much faster to do this once for all photons\n",
    "    p_photons,x_photons=draw_seed_photons(mc_parms,number=mc_parms['n_photons'])\n",
    "   \n",
    "    # run the scattering code n_photons times\n",
    "    for p_photon,x_photon,i in zip(p_photons,x_photons,range(mc_parms['n_photons'])):\n",
    "        # initial photon four-momentum\n",
    "        # store seed photon energy for future use (calculating Compton-y parameter)\n",
    "        hnu_seed[i]=p_photon[0]*c_light\n",
    "\n",
    "        # keep scattering until absorbed or escaped\n",
    "        p_photon=inverse_compton_scatter(p_photon,mc_parms)\n",
    "        hnu_scattered[i]=p_photon[0]*c_light\n",
    "\n",
    "    # only return escaped photons and their seed energy\n",
    "    return(hnu_scattered[hnu_scattered > 0],hnu_seed[hnu_scattered > 0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Wrapper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_mc(mc_parms,bins=None,xlims=None):\n",
    "    \"\"\"Run an MC simulation and plot a histogram of the output. DOES NOT SAVE A PDF :)\n",
    "    \n",
    "    Args:\n",
    "        mc_parms (dictionary): Monte-Carlo parameters\n",
    "    \n",
    "    Paramters:\n",
    "        bins (numpy array): Optional spectral bins\n",
    "        xlims (2-element list, real): plot-limits\n",
    "    \n",
    "    Returns:\n",
    "        numpy array: The energies of all photons escaping the corona\n",
    "        numpy array: The seed-energies of the escaping photons\n",
    "    \"\"\"\n",
    "    \n",
    "    \n",
    "    \n",
    "    # Now run simulation and normalize all outgoing photon energies \n",
    "    # so we can investigate energy gains and losses\n",
    "    hnu_scattered,hnu_seeds=np.array(monte_carlo(mc_parms))/mc_parms['kt_seeds'] \n",
    "    \n",
    "    if (xlims is None):\n",
    "        xlims=[hnu_scattered.min(),hnu_scattered.max()]    \n",
    "    if (bins is None):\n",
    "        bins=np.logspace(np.log10(xlims[0]),np.log10(xlims[1]),num=100)\n",
    "    else:\n",
    "        bins=np.logspace(np.log10(xlims[0]),np.log10(xlims[1]),num=bins)\n",
    "   \n",
    "\n",
    "    fig=plt.figure()\n",
    "    plt.hist(hnu_scattered,bins=bins,log=True,\n",
    "             label=r'$\\tau=${:4.1f}'.format(mc_parms['tau']))\n",
    "    plt.xscale('log')\n",
    "    plt.xlim(xlims[0],xlims[1])\n",
    "    plt.xlabel(r'$h\\nu/h\\nu_{0}$',fontsize=20)\n",
    "    plt.ylabel(r'$N(h\\nu)$',fontsize=20)\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "    print('Fraction of escaping photons: {0:5.3e}\\n'.format(hnu_scattered.size/mc_parms['n_photons']))\n",
    "    print('Compton y parameter: {0:5.3e}\\n'.format(compton_y(hnu_seeds,hnu_scattered)))\n",
    "    return(hnu_scattered,hnu_seeds)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Quick test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fraction of escaping photons: 8.590e-01\n",
      "\n",
      "Compton y parameter: 2.285e-03\n",
      "\n"
     ]
    }
   ],
   "source": [
    "mc_parms={'n_photons':100000,         # start somewhat small and go up\n",
    "          'kt_seeds':1.6e-9,         # 1 keV input photons\n",
    "          'H':1e7,                   # say H ~ R, and R ~ 100 R_g ~ 3e7 cm\n",
    "          'velocity':3e9,            # 10% speed of light--pretty hot\n",
    "          'tau':0.1,                 # tau ~ 0.1: Small-ish optical depth\n",
    "          'v_dist':f_of_v_mono,      # name of velocity distribution function\n",
    "          'hnu_dist':f_of_hnu_mono,  # name of photon distribution function\n",
    "         }\n",
    "\n",
    "hnu_scattered,hnu_seeds=plot_mc(mc_parms,bins=100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The electron distribution function\n",
    "Before, we've already created a function that spawns a random electron according to the Maxwell-JÃ¼ttner distribution. We will now tweak it so that it can be used as a velocity distribution function in the Monte Carlo simulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "# since we used theta_th before, we define\n",
    "mc_parms['kt_electron']=theta_th*8.2e-7 # electron mass in [erg]\n",
    "\n",
    "\n",
    "\n",
    "def f_of_v_MJ(mc_parms):\n",
    "    number=1000\n",
    "    n_electrons=1\n",
    "    gamma = np.linspace(gamma_min,gamma_max,number)\n",
    "    gamma_electron=N_gamma_of_P(gamma,CDF_electrons,n_electrons)\n",
    "    v=np.sqrt(1-1/gamma_electron**2)*c_light\n",
    "    return(v)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The photon distribution function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f_of_hnu_sync(mc_parms,number=None):\n",
    "    if number is None:\n",
    "        number=1\n",
    "    omega=np.logspace(log_omega_min,log_omega_max,100)\n",
    "    omega = N_omega_of_P(omega,CDF_photons,number)\n",
    "    hnu=hbar*omega\n",
    "    return(hnu)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ICMC with these distributions\n",
    "let's not devide by $h \\nu_0$ actually."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_mc_edited(mc_parms,bins=None,xlims=None):\n",
    "    \"\"\"Run an MC simulation and plot a histogram of the output. DOES NOT SAVE A PDF :)\n",
    "    \n",
    "    Args:\n",
    "        mc_parms (dictionary): Monte-Carlo parameters\n",
    "    \n",
    "    Paramters:\n",
    "        bins (numpy array): Optional spectral bins\n",
    "        xlims (2-element list, real): plot-limits\n",
    "    \n",
    "    Returns:\n",
    "        numpy array: The energies of all photons escaping the corona\n",
    "        numpy array: The seed-energies of the escaping photons\n",
    "    \"\"\"\n",
    "    \n",
    "    \n",
    "    \n",
    "    # Now run simulation and normalize all outgoing photon energies \n",
    "    # so we can investigate energy gains and losses\n",
    "    hnu_scattered,hnu_seeds=np.array(monte_carlo(mc_parms))/hbar\n",
    "    \n",
    "    if (xlims is None):\n",
    "        xlims=[hnu_scattered.min(),hnu_scattered.max()]    \n",
    "    if (bins is None):\n",
    "        bins=np.logspace(np.log10(xlims[0]),np.log10(xlims[1]),num=100)\n",
    "    else:\n",
    "        bins=np.logspace(np.log10(xlims[0]),np.log10(xlims[1]),num=bins)\n",
    "   \n",
    "\n",
    "    fig=plt.figure()\n",
    "    plt.hist(hnu_scattered,bins=bins,log=True,\n",
    "             label=r'$\\tau=${:4.1f}'.format(mc_parms['tau']))\n",
    "    plt.xscale('log')\n",
    "    plt.xlim(xlims[0],xlims[1])\n",
    "    plt.xlabel(r'$\\omega$',fontsize=20)\n",
    "    plt.ylabel(r'$N(\\omega)$',fontsize=20)\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "    print('Fraction of escaping photons: {0:5.3e}\\n'.format(hnu_scattered.size/mc_parms['n_photons']))\n",
    "    print('Compton y parameter: {0:5.3e}\\n'.format(compton_y(hnu_seeds,hnu_scattered)))\n",
    "    return(hnu_scattered,hnu_seeds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fraction of escaping photons: 4.255e-01\n",
      "\n",
      "Compton y parameter: 4.789e+58\n",
      "\n"
     ]
    }
   ],
   "source": [
    "mc_parms={'n_photons':100000,         # \n",
    "          'kt_seeds':1.6e-9,         # 1 keV input photons. ### I AM NOT USING THESE ###\n",
    "          'H':1e7,                   # say H ~ R, and R ~ 100 R_g ~ 3e7 cm\n",
    "          'velocity':3e9,            # 10% speed of light--pretty hot. ### ONLY FOR F_MONO ###\n",
    "          'tau':1,                 # tau\n",
    "          'v_dist':f_of_v_MJ,      # name of velocity distribution function\n",
    "          'hnu_dist':f_of_hnu_sync,  # name of photon distribution function\n",
    "         }\n",
    "\n",
    "hnu_scattered,hnu_seeds=plot_mc_edited(mc_parms,bins=100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Equipartition\n",
    "\n",
    "$$\n",
    "U_e = U_B \n",
    "$$\n",
    "$$\n",
    "\\gamma n_e m_e c^2 = \\frac{B^2}{8\\pi}\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
